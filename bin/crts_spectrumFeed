#!/usr/bin/env python

#####################################################################
# to simply test try running:
#
#   nc -lp 9282
#
# and:
#
#   crts_spectrumFeed
#
#
# You should see json spew in the output of nc (netcat). 
#
#####################################################################


from gnuradio import blocks
from gnuradio import fft
from gnuradio import gr
from gnuradio import uhd
from gnuradio.fft import window
import json
import argparse
from socket import *
import platform
import os


class spectrum_sensing_nikita(gr.top_block):

    def __init__(self, center_freq, bins, bandwidth, device_addr):
        gr.top_block.__init__(self, "Spectrum Sensing Nikita")

        ##################################################
        # Blocks
        ##################################################
        self.uhd_usrp_source_0 = uhd.usrp_source(
        	device_addr=device_addr,
        	stream_args=uhd.stream_args(
        		cpu_format="fc32",
        		channels=range(1),
        	),
        )
        self.uhd_usrp_source_0.set_samp_rate(bandwidth)
        self.uhd_usrp_source_0.set_center_freq(center_freq, 0)
        self.uhd_usrp_source_0.set_gain(0, 0)
        self.uhd_usrp_source_0.set_bandwidth(bandwidth, 0)
        self.fft_vxx_0 = fft.fft_vcc(bins, True, (window.blackmanharris(bins)), True, 1)
        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(\
                gr.sizeof_gr_complex*1, bins)
        self.blocks_probe_signal_vx_0 = blocks.probe_signal_vf(bins)
        self.blocks_complex_to_mag_0 = blocks.complex_to_mag(bins)

        ##################################################
        # Connections
        ##################################################
        self.connect((self.uhd_usrp_source_0, 0), (self.blocks_stream_to_vector_0, 0))
        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_vxx_0, 0))
        self.connect((self.fft_vxx_0, 0), (self.blocks_complex_to_mag_0, 0))
        self.connect((self.blocks_complex_to_mag_0, 0), (self.blocks_probe_signal_vx_0, 0))



    
parser = argparse.ArgumentParser(description='Spectrum feed script.  Replace the CAPITALIZED words with input values')
parser.add_argument('-f','--freq',\
        help='Center frequency in MHz',\
        default=914.5)
parser.add_argument('-b','--bandwidth',\
        help='Bandwidth in MHz',\
        default=0.5)
parser.add_argument('-n','--bins',\
        help='Number of FFT bins.  More for higher accuracy',\
        default=80)
parser.add_argument('-P','--period',\
        help='The period of time in seconds between data sends',\
        default=0.05)
parser.add_argument('-p','--port',\
        help='Server port.  Env SPECTRUM_PORT will override this value.',\
        default=9282)
parser.add_argument('-d','--device',\
        help='UHD USRP device',\
        default='addr=192.168.10.3')
parser.add_argument('-a','--address',\
        help='Server address to send spectrum data to.  Env SERVER_ADDRESS will override this value.',\
        default='localhost')


# The format is 

def SendSpectrum(tcpClientSock, tb, cFreq, bandwidth, period):

    tcpClientSock.sendall('I{"name":"spectrumUpdate","args":[%g,%g,%g,%s]}' %\
             (cFreq, bandwidth, period, list(tb.blocks_probe_signal_vx_0.level())))


# This is bad code.  There's so much wrong with this.
#
def Run(tcpClientSock, args):

    bandwidth = float(args['bandwidth'])*1e6
    bins = int(args['bins']);
    cFreq = float(args['freq'])*1e6
    period = float(args['period'])
    if period < 1.0/60.0:
        period = 1.0/60.0
    tb = spectrum_sensing_nikita(cFreq, bins, bandwidth, args['device'])
    tb.start()
    tcpClientSock.sendall('I{"name":"spectrumStart","args":["%s:%s",%g,%g,%g,%d]}' %\
            (platform.node(), args['device'], cFreq, bandwidth, period, bins))

    tcpClientSock.settimeout(period)

    while True: 
        try:
            data = tcpClientSock.recv(10000)
            print data
            if data.startswith('{'):
                # { bandwidth: bandwidth, bins: bins, cFreq: cFreq,
                #   updatePeriod: updatePeriod in Hz }
                print data
                params = json.loads(data)
                bandwidth = float(params['bandwidth'])*1e6
                bins = int(params['bins']);
                cFreq = float(params['cFreq'])*1e6
                period = float(params['updatePeriod'])
                if period < 1.0/60.0:
                    period = 1.0/60.0
                print 'crts_spectrumFeed Got parameters:'
                print params
                tb = spectrum_sensing_nikita(cFreq, bins, bandwidth, args['device'])
                tcpClientSock.settimeout(period)
                tb.start()
                SendSpectrum(tcpClientSock, tb, cFreq, bandwidth, period)
            else:
                print 'crts_spectrumFeed finishing'
                tb.stop()
                break
        except timeout:
            SendSpectrum(tcpClientSock, tb, cFreq, bandwidth, period)
        except Exception as inst:
            print inst
            tb.stop()
            break


if __name__ == '__main__':
    args = vars(parser.parse_args())
    tcpClient = socket(AF_INET,SOCK_STREAM)
    if os.environ.get('SERVER_ADDRESS'):
        args['address'] =  os.environ['SERVER_ADDRESS']
    if os.environ.get('SPECTRUM_PORT'):
        args['port'] = os.environ['SPECTRUM_PORT']
    tcpClient.connect((args['address'], int(args['port'])))
    Run(tcpClient, args)
    tcpClient.close()
    print "crts_spectrumFeed Exiting"
